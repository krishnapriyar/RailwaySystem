'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="rail")>  _
Partial Public Class railDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertBooking(instance As Booking)
    End Sub
  Partial Private Sub UpdateBooking(instance As Booking)
    End Sub
  Partial Private Sub DeleteBooking(instance As Booking)
    End Sub
  Partial Private Sub InsertCard(instance As Card)
    End Sub
  Partial Private Sub UpdateCard(instance As Card)
    End Sub
  Partial Private Sub DeleteCard(instance As Card)
    End Sub
  Partial Private Sub InsertCustomer(instance As Customer)
    End Sub
  Partial Private Sub UpdateCustomer(instance As Customer)
    End Sub
  Partial Private Sub DeleteCustomer(instance As Customer)
    End Sub
  Partial Private Sub InsertPayment(instance As Payment)
    End Sub
  Partial Private Sub UpdatePayment(instance As Payment)
    End Sub
  Partial Private Sub DeletePayment(instance As Payment)
    End Sub
  Partial Private Sub InsertSchedule(instance As Schedule)
    End Sub
  Partial Private Sub UpdateSchedule(instance As Schedule)
    End Sub
  Partial Private Sub DeleteSchedule(instance As Schedule)
    End Sub
  Partial Private Sub InsertStaff(instance As Staff)
    End Sub
  Partial Private Sub UpdateStaff(instance As Staff)
    End Sub
  Partial Private Sub DeleteStaff(instance As Staff)
    End Sub
  Partial Private Sub InsertStation(instance As Station)
    End Sub
  Partial Private Sub UpdateStation(instance As Station)
    End Sub
  Partial Private Sub DeleteStation(instance As Station)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.RailwaySystem.My.MySettings.Default.railConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Bookings() As System.Data.Linq.Table(Of Booking)
		Get
			Return Me.GetTable(Of Booking)
		End Get
	End Property
	
	Public ReadOnly Property Cards() As System.Data.Linq.Table(Of Card)
		Get
			Return Me.GetTable(Of Card)
		End Get
	End Property
	
	Public ReadOnly Property Customers() As System.Data.Linq.Table(Of Customer)
		Get
			Return Me.GetTable(Of Customer)
		End Get
	End Property
	
	Public ReadOnly Property Payments() As System.Data.Linq.Table(Of Payment)
		Get
			Return Me.GetTable(Of Payment)
		End Get
	End Property
	
	Public ReadOnly Property Schedules() As System.Data.Linq.Table(Of Schedule)
		Get
			Return Me.GetTable(Of Schedule)
		End Get
	End Property
	
	Public ReadOnly Property Staffs() As System.Data.Linq.Table(Of Staff)
		Get
			Return Me.GetTable(Of Staff)
		End Get
	End Property
	
	Public ReadOnly Property Stations() As System.Data.Linq.Table(Of Station)
		Get
			Return Me.GetTable(Of Station)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Booking")>  _
Partial Public Class Booking
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _bookingID As Integer
	
	Private _source As System.Nullable(Of Integer)
	
	Private _destination As System.Nullable(Of Integer)
	
	Private _departureTime As System.Nullable(Of System.TimeSpan)
	
	Private _custID As System.Nullable(Of Integer)
	
	Private _scheduleID As System.Nullable(Of Integer)
	
	Private _Payments As EntitySet(Of Payment)
	
	Private _Customer As EntityRef(Of Customer)
	
	Private _Schedule As EntityRef(Of Schedule)
	
	Private _Station As EntityRef(Of Station)
	
	Private _Station1 As EntityRef(Of Station)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnbookingIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnbookingIDChanged()
    End Sub
    Partial Private Sub OnsourceChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnsourceChanged()
    End Sub
    Partial Private Sub OndestinationChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OndestinationChanged()
    End Sub
    Partial Private Sub OndepartureTimeChanging(value As System.Nullable(Of System.TimeSpan))
    End Sub
    Partial Private Sub OndepartureTimeChanged()
    End Sub
    Partial Private Sub OncustIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OncustIDChanged()
    End Sub
    Partial Private Sub OnscheduleIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnscheduleIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Payments = New EntitySet(Of Payment)(AddressOf Me.attach_Payments, AddressOf Me.detach_Payments)
		Me._Customer = CType(Nothing, EntityRef(Of Customer))
		Me._Schedule = CType(Nothing, EntityRef(Of Schedule))
		Me._Station = CType(Nothing, EntityRef(Of Station))
		Me._Station1 = CType(Nothing, EntityRef(Of Station))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bookingID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property bookingID() As Integer
		Get
			Return Me._bookingID
		End Get
		Set
			If ((Me._bookingID = value)  _
						= false) Then
				Me.OnbookingIDChanging(value)
				Me.SendPropertyChanging
				Me._bookingID = value
				Me.SendPropertyChanged("bookingID")
				Me.OnbookingIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_source", DbType:="Int")>  _
	Public Property source() As System.Nullable(Of Integer)
		Get
			Return Me._source
		End Get
		Set
			If (Me._source.Equals(value) = false) Then
				If Me._Station1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnsourceChanging(value)
				Me.SendPropertyChanging
				Me._source = value
				Me.SendPropertyChanged("source")
				Me.OnsourceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_destination", DbType:="Int")>  _
	Public Property destination() As System.Nullable(Of Integer)
		Get
			Return Me._destination
		End Get
		Set
			If (Me._destination.Equals(value) = false) Then
				If Me._Station.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OndestinationChanging(value)
				Me.SendPropertyChanging
				Me._destination = value
				Me.SendPropertyChanged("destination")
				Me.OndestinationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_departureTime", DbType:="Time")>  _
	Public Property departureTime() As System.Nullable(Of System.TimeSpan)
		Get
			Return Me._departureTime
		End Get
		Set
			If (Me._departureTime.Equals(value) = false) Then
				Me.OndepartureTimeChanging(value)
				Me.SendPropertyChanging
				Me._departureTime = value
				Me.SendPropertyChanged("departureTime")
				Me.OndepartureTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_custID", DbType:="Int")>  _
	Public Property custID() As System.Nullable(Of Integer)
		Get
			Return Me._custID
		End Get
		Set
			If (Me._custID.Equals(value) = false) Then
				If Me._Customer.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OncustIDChanging(value)
				Me.SendPropertyChanging
				Me._custID = value
				Me.SendPropertyChanged("custID")
				Me.OncustIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_scheduleID", DbType:="Int")>  _
	Public Property scheduleID() As System.Nullable(Of Integer)
		Get
			Return Me._scheduleID
		End Get
		Set
			If (Me._scheduleID.Equals(value) = false) Then
				If Me._Schedule.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnscheduleIDChanging(value)
				Me.SendPropertyChanging
				Me._scheduleID = value
				Me.SendPropertyChanged("scheduleID")
				Me.OnscheduleIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Booking_Payment", Storage:="_Payments", ThisKey:="bookingID", OtherKey:="bookingID")>  _
	Public Property Payments() As EntitySet(Of Payment)
		Get
			Return Me._Payments
		End Get
		Set
			Me._Payments.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Customer_Booking", Storage:="_Customer", ThisKey:="custID", OtherKey:="custID", IsForeignKey:=true)>  _
	Public Property Customer() As Customer
		Get
			Return Me._Customer.Entity
		End Get
		Set
			Dim previousValue As Customer = Me._Customer.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Customer.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Customer.Entity = Nothing
					previousValue.Bookings.Remove(Me)
				End If
				Me._Customer.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Bookings.Add(Me)
					Me._custID = value.custID
				Else
					Me._custID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Customer")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Schedule_Booking", Storage:="_Schedule", ThisKey:="scheduleID", OtherKey:="scheduleID", IsForeignKey:=true)>  _
	Public Property Schedule() As Schedule
		Get
			Return Me._Schedule.Entity
		End Get
		Set
			Dim previousValue As Schedule = Me._Schedule.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Schedule.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Schedule.Entity = Nothing
					previousValue.Bookings.Remove(Me)
				End If
				Me._Schedule.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Bookings.Add(Me)
					Me._scheduleID = value.scheduleID
				Else
					Me._scheduleID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Schedule")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Station_Booking", Storage:="_Station", ThisKey:="destination", OtherKey:="stationID", IsForeignKey:=true)>  _
	Public Property Station() As Station
		Get
			Return Me._Station.Entity
		End Get
		Set
			Dim previousValue As Station = Me._Station.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Station.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Station.Entity = Nothing
					previousValue.Bookings.Remove(Me)
				End If
				Me._Station.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Bookings.Add(Me)
					Me._destination = value.stationID
				Else
					Me._destination = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Station")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Station_Booking1", Storage:="_Station1", ThisKey:="source", OtherKey:="stationID", IsForeignKey:=true)>  _
	Public Property Station1() As Station
		Get
			Return Me._Station1.Entity
		End Get
		Set
			Dim previousValue As Station = Me._Station1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Station1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Station1.Entity = Nothing
					previousValue.Bookings1.Remove(Me)
				End If
				Me._Station1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Bookings1.Add(Me)
					Me._source = value.stationID
				Else
					Me._source = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Station1")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Payments(ByVal entity As Payment)
		Me.SendPropertyChanging
		entity.Booking = Me
	End Sub
	
	Private Sub detach_Payments(ByVal entity As Payment)
		Me.SendPropertyChanging
		entity.Booking = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Card")>  _
Partial Public Class Card
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _cardNo As Integer
	
	Private _cardHolderName As String
	
	Private _cardType As String
	
	Private _expiryMonth As System.Nullable(Of Integer)
	
	Private _expiryYear As System.Nullable(Of Integer)
	
	Private _ccv As String
	
	Private _issuer As String
	
	Private _balance As System.Nullable(Of Decimal)
	
	Private _Payments As EntitySet(Of Payment)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OncardNoChanging(value As Integer)
    End Sub
    Partial Private Sub OncardNoChanged()
    End Sub
    Partial Private Sub OncardHolderNameChanging(value As String)
    End Sub
    Partial Private Sub OncardHolderNameChanged()
    End Sub
    Partial Private Sub OncardTypeChanging(value As String)
    End Sub
    Partial Private Sub OncardTypeChanged()
    End Sub
    Partial Private Sub OnexpiryMonthChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnexpiryMonthChanged()
    End Sub
    Partial Private Sub OnexpiryYearChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnexpiryYearChanged()
    End Sub
    Partial Private Sub OnccvChanging(value As String)
    End Sub
    Partial Private Sub OnccvChanged()
    End Sub
    Partial Private Sub OnissuerChanging(value As String)
    End Sub
    Partial Private Sub OnissuerChanged()
    End Sub
    Partial Private Sub OnbalanceChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnbalanceChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Payments = New EntitySet(Of Payment)(AddressOf Me.attach_Payments, AddressOf Me.detach_Payments)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cardNo", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property cardNo() As Integer
		Get
			Return Me._cardNo
		End Get
		Set
			If ((Me._cardNo = value)  _
						= false) Then
				Me.OncardNoChanging(value)
				Me.SendPropertyChanging
				Me._cardNo = value
				Me.SendPropertyChanged("cardNo")
				Me.OncardNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cardHolderName", DbType:="VarChar(50)")>  _
	Public Property cardHolderName() As String
		Get
			Return Me._cardHolderName
		End Get
		Set
			If (String.Equals(Me._cardHolderName, value) = false) Then
				Me.OncardHolderNameChanging(value)
				Me.SendPropertyChanging
				Me._cardHolderName = value
				Me.SendPropertyChanged("cardHolderName")
				Me.OncardHolderNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cardType", DbType:="VarChar(10)")>  _
	Public Property cardType() As String
		Get
			Return Me._cardType
		End Get
		Set
			If (String.Equals(Me._cardType, value) = false) Then
				Me.OncardTypeChanging(value)
				Me.SendPropertyChanging
				Me._cardType = value
				Me.SendPropertyChanged("cardType")
				Me.OncardTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_expiryMonth", DbType:="Int")>  _
	Public Property expiryMonth() As System.Nullable(Of Integer)
		Get
			Return Me._expiryMonth
		End Get
		Set
			If (Me._expiryMonth.Equals(value) = false) Then
				Me.OnexpiryMonthChanging(value)
				Me.SendPropertyChanging
				Me._expiryMonth = value
				Me.SendPropertyChanged("expiryMonth")
				Me.OnexpiryMonthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_expiryYear", DbType:="Int")>  _
	Public Property expiryYear() As System.Nullable(Of Integer)
		Get
			Return Me._expiryYear
		End Get
		Set
			If (Me._expiryYear.Equals(value) = false) Then
				Me.OnexpiryYearChanging(value)
				Me.SendPropertyChanging
				Me._expiryYear = value
				Me.SendPropertyChanged("expiryYear")
				Me.OnexpiryYearChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ccv", DbType:="Char(4)")>  _
	Public Property ccv() As String
		Get
			Return Me._ccv
		End Get
		Set
			If (String.Equals(Me._ccv, value) = false) Then
				Me.OnccvChanging(value)
				Me.SendPropertyChanging
				Me._ccv = value
				Me.SendPropertyChanged("ccv")
				Me.OnccvChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_issuer", DbType:="VarChar(50)")>  _
	Public Property issuer() As String
		Get
			Return Me._issuer
		End Get
		Set
			If (String.Equals(Me._issuer, value) = false) Then
				Me.OnissuerChanging(value)
				Me.SendPropertyChanging
				Me._issuer = value
				Me.SendPropertyChanged("issuer")
				Me.OnissuerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_balance", DbType:="Decimal(18,2)")>  _
	Public Property balance() As System.Nullable(Of Decimal)
		Get
			Return Me._balance
		End Get
		Set
			If (Me._balance.Equals(value) = false) Then
				Me.OnbalanceChanging(value)
				Me.SendPropertyChanging
				Me._balance = value
				Me.SendPropertyChanged("balance")
				Me.OnbalanceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Card_Payment", Storage:="_Payments", ThisKey:="cardNo", OtherKey:="cardNo")>  _
	Public Property Payments() As EntitySet(Of Payment)
		Get
			Return Me._Payments
		End Get
		Set
			Me._Payments.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Payments(ByVal entity As Payment)
		Me.SendPropertyChanging
		entity.Card = Me
	End Sub
	
	Private Sub detach_Payments(ByVal entity As Payment)
		Me.SendPropertyChanging
		entity.Card = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Customer")>  _
Partial Public Class Customer
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _custID As Integer
	
	Private _custName As String
	
	Private _custIC As String
	
	Private _custPhone As String
	
	Private _custEmail As String
	
	Private _custAddress As String
	
	Private _custType As String
	
	Private _custPassword As String
	
	Private _Bookings As EntitySet(Of Booking)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OncustIDChanging(value As Integer)
    End Sub
    Partial Private Sub OncustIDChanged()
    End Sub
    Partial Private Sub OncustNameChanging(value As String)
    End Sub
    Partial Private Sub OncustNameChanged()
    End Sub
    Partial Private Sub OncustICChanging(value As String)
    End Sub
    Partial Private Sub OncustICChanged()
    End Sub
    Partial Private Sub OncustPhoneChanging(value As String)
    End Sub
    Partial Private Sub OncustPhoneChanged()
    End Sub
    Partial Private Sub OncustEmailChanging(value As String)
    End Sub
    Partial Private Sub OncustEmailChanged()
    End Sub
    Partial Private Sub OncustAddressChanging(value As String)
    End Sub
    Partial Private Sub OncustAddressChanged()
    End Sub
    Partial Private Sub OncustTypeChanging(value As String)
    End Sub
    Partial Private Sub OncustTypeChanged()
    End Sub
    Partial Private Sub OncustPasswordChanging(value As String)
    End Sub
    Partial Private Sub OncustPasswordChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Bookings = New EntitySet(Of Booking)(AddressOf Me.attach_Bookings, AddressOf Me.detach_Bookings)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_custID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property custID() As Integer
		Get
			Return Me._custID
		End Get
		Set
			If ((Me._custID = value)  _
						= false) Then
				Me.OncustIDChanging(value)
				Me.SendPropertyChanging
				Me._custID = value
				Me.SendPropertyChanged("custID")
				Me.OncustIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_custName", DbType:="VarChar(50)")>  _
	Public Property custName() As String
		Get
			Return Me._custName
		End Get
		Set
			If (String.Equals(Me._custName, value) = false) Then
				Me.OncustNameChanging(value)
				Me.SendPropertyChanging
				Me._custName = value
				Me.SendPropertyChanged("custName")
				Me.OncustNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_custIC", DbType:="Char(13)")>  _
	Public Property custIC() As String
		Get
			Return Me._custIC
		End Get
		Set
			If (String.Equals(Me._custIC, value) = false) Then
				Me.OncustICChanging(value)
				Me.SendPropertyChanging
				Me._custIC = value
				Me.SendPropertyChanged("custIC")
				Me.OncustICChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_custPhone", DbType:="VarChar(20)")>  _
	Public Property custPhone() As String
		Get
			Return Me._custPhone
		End Get
		Set
			If (String.Equals(Me._custPhone, value) = false) Then
				Me.OncustPhoneChanging(value)
				Me.SendPropertyChanging
				Me._custPhone = value
				Me.SendPropertyChanged("custPhone")
				Me.OncustPhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_custEmail", DbType:="VarChar(50)")>  _
	Public Property custEmail() As String
		Get
			Return Me._custEmail
		End Get
		Set
			If (String.Equals(Me._custEmail, value) = false) Then
				Me.OncustEmailChanging(value)
				Me.SendPropertyChanging
				Me._custEmail = value
				Me.SendPropertyChanged("custEmail")
				Me.OncustEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_custAddress", DbType:="VarChar(MAX)")>  _
	Public Property custAddress() As String
		Get
			Return Me._custAddress
		End Get
		Set
			If (String.Equals(Me._custAddress, value) = false) Then
				Me.OncustAddressChanging(value)
				Me.SendPropertyChanging
				Me._custAddress = value
				Me.SendPropertyChanged("custAddress")
				Me.OncustAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_custType", DbType:="VarChar(20)")>  _
	Public Property custType() As String
		Get
			Return Me._custType
		End Get
		Set
			If (String.Equals(Me._custType, value) = false) Then
				Me.OncustTypeChanging(value)
				Me.SendPropertyChanging
				Me._custType = value
				Me.SendPropertyChanged("custType")
				Me.OncustTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_custPassword", DbType:="VarChar(MAX)")>  _
	Public Property custPassword() As String
		Get
			Return Me._custPassword
		End Get
		Set
			If (String.Equals(Me._custPassword, value) = false) Then
				Me.OncustPasswordChanging(value)
				Me.SendPropertyChanging
				Me._custPassword = value
				Me.SendPropertyChanged("custPassword")
				Me.OncustPasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Customer_Booking", Storage:="_Bookings", ThisKey:="custID", OtherKey:="custID")>  _
	Public Property Bookings() As EntitySet(Of Booking)
		Get
			Return Me._Bookings
		End Get
		Set
			Me._Bookings.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Bookings(ByVal entity As Booking)
		Me.SendPropertyChanging
		entity.Customer = Me
	End Sub
	
	Private Sub detach_Bookings(ByVal entity As Booking)
		Me.SendPropertyChanging
		entity.Customer = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Payment")>  _
Partial Public Class Payment
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _paymentID As Integer
	
	Private _paymentDate As System.Nullable(Of Date)
	
	Private _paymentTime As System.Nullable(Of System.TimeSpan)
	
	Private _amount As System.Nullable(Of Decimal)
	
	Private _cardNo As System.Nullable(Of Integer)
	
	Private _staffInCharge As System.Nullable(Of Integer)
	
	Private _bookingID As System.Nullable(Of Integer)
	
	Private _Booking As EntityRef(Of Booking)
	
	Private _Card As EntityRef(Of Card)
	
	Private _Staff As EntityRef(Of Staff)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnpaymentIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnpaymentIDChanged()
    End Sub
    Partial Private Sub OnpaymentDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnpaymentDateChanged()
    End Sub
    Partial Private Sub OnpaymentTimeChanging(value As System.Nullable(Of System.TimeSpan))
    End Sub
    Partial Private Sub OnpaymentTimeChanged()
    End Sub
    Partial Private Sub OnamountChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnamountChanged()
    End Sub
    Partial Private Sub OncardNoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OncardNoChanged()
    End Sub
    Partial Private Sub OnstaffInChargeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnstaffInChargeChanged()
    End Sub
    Partial Private Sub OnbookingIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnbookingIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Booking = CType(Nothing, EntityRef(Of Booking))
		Me._Card = CType(Nothing, EntityRef(Of Card))
		Me._Staff = CType(Nothing, EntityRef(Of Staff))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property paymentID() As Integer
		Get
			Return Me._paymentID
		End Get
		Set
			If ((Me._paymentID = value)  _
						= false) Then
				Me.OnpaymentIDChanging(value)
				Me.SendPropertyChanging
				Me._paymentID = value
				Me.SendPropertyChanged("paymentID")
				Me.OnpaymentIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentDate", DbType:="Date")>  _
	Public Property paymentDate() As System.Nullable(Of Date)
		Get
			Return Me._paymentDate
		End Get
		Set
			If (Me._paymentDate.Equals(value) = false) Then
				Me.OnpaymentDateChanging(value)
				Me.SendPropertyChanging
				Me._paymentDate = value
				Me.SendPropertyChanged("paymentDate")
				Me.OnpaymentDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentTime", DbType:="Time")>  _
	Public Property paymentTime() As System.Nullable(Of System.TimeSpan)
		Get
			Return Me._paymentTime
		End Get
		Set
			If (Me._paymentTime.Equals(value) = false) Then
				Me.OnpaymentTimeChanging(value)
				Me.SendPropertyChanging
				Me._paymentTime = value
				Me.SendPropertyChanged("paymentTime")
				Me.OnpaymentTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_amount", DbType:="Decimal(18,2)")>  _
	Public Property amount() As System.Nullable(Of Decimal)
		Get
			Return Me._amount
		End Get
		Set
			If (Me._amount.Equals(value) = false) Then
				Me.OnamountChanging(value)
				Me.SendPropertyChanging
				Me._amount = value
				Me.SendPropertyChanged("amount")
				Me.OnamountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cardNo", DbType:="Int")>  _
	Public Property cardNo() As System.Nullable(Of Integer)
		Get
			Return Me._cardNo
		End Get
		Set
			If (Me._cardNo.Equals(value) = false) Then
				If Me._Card.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OncardNoChanging(value)
				Me.SendPropertyChanging
				Me._cardNo = value
				Me.SendPropertyChanged("cardNo")
				Me.OncardNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_staffInCharge", DbType:="Int")>  _
	Public Property staffInCharge() As System.Nullable(Of Integer)
		Get
			Return Me._staffInCharge
		End Get
		Set
			If (Me._staffInCharge.Equals(value) = false) Then
				If Me._Staff.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnstaffInChargeChanging(value)
				Me.SendPropertyChanging
				Me._staffInCharge = value
				Me.SendPropertyChanged("staffInCharge")
				Me.OnstaffInChargeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bookingID", DbType:="Int")>  _
	Public Property bookingID() As System.Nullable(Of Integer)
		Get
			Return Me._bookingID
		End Get
		Set
			If (Me._bookingID.Equals(value) = false) Then
				If Me._Booking.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnbookingIDChanging(value)
				Me.SendPropertyChanging
				Me._bookingID = value
				Me.SendPropertyChanged("bookingID")
				Me.OnbookingIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Booking_Payment", Storage:="_Booking", ThisKey:="bookingID", OtherKey:="bookingID", IsForeignKey:=true)>  _
	Public Property Booking() As Booking
		Get
			Return Me._Booking.Entity
		End Get
		Set
			Dim previousValue As Booking = Me._Booking.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Booking.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Booking.Entity = Nothing
					previousValue.Payments.Remove(Me)
				End If
				Me._Booking.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Payments.Add(Me)
					Me._bookingID = value.bookingID
				Else
					Me._bookingID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Booking")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Card_Payment", Storage:="_Card", ThisKey:="cardNo", OtherKey:="cardNo", IsForeignKey:=true)>  _
	Public Property Card() As Card
		Get
			Return Me._Card.Entity
		End Get
		Set
			Dim previousValue As Card = Me._Card.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Card.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Card.Entity = Nothing
					previousValue.Payments.Remove(Me)
				End If
				Me._Card.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Payments.Add(Me)
					Me._cardNo = value.cardNo
				Else
					Me._cardNo = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Card")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Staff_Payment", Storage:="_Staff", ThisKey:="staffInCharge", OtherKey:="staffID", IsForeignKey:=true)>  _
	Public Property Staff() As Staff
		Get
			Return Me._Staff.Entity
		End Get
		Set
			Dim previousValue As Staff = Me._Staff.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Staff.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Staff.Entity = Nothing
					previousValue.Payments.Remove(Me)
				End If
				Me._Staff.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Payments.Add(Me)
					Me._staffInCharge = value.staffID
				Else
					Me._staffInCharge = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Staff")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Schedule")>  _
Partial Public Class Schedule
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _scheduleID As Integer
	
	Private _startTime As System.Nullable(Of System.TimeSpan)
	
	Private _endTime As System.Nullable(Of System.TimeSpan)
	
	Private _firstStationID As System.Nullable(Of Integer)
	
	Private _lastStationID As System.Nullable(Of Integer)
	
	Private _Bookings As EntitySet(Of Booking)
	
	Private _Station As EntityRef(Of Station)
	
	Private _Station1 As EntityRef(Of Station)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnscheduleIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnscheduleIDChanged()
    End Sub
    Partial Private Sub OnstartTimeChanging(value As System.Nullable(Of System.TimeSpan))
    End Sub
    Partial Private Sub OnstartTimeChanged()
    End Sub
    Partial Private Sub OnendTimeChanging(value As System.Nullable(Of System.TimeSpan))
    End Sub
    Partial Private Sub OnendTimeChanged()
    End Sub
    Partial Private Sub OnfirstStationIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnfirstStationIDChanged()
    End Sub
    Partial Private Sub OnlastStationIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnlastStationIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Bookings = New EntitySet(Of Booking)(AddressOf Me.attach_Bookings, AddressOf Me.detach_Bookings)
		Me._Station = CType(Nothing, EntityRef(Of Station))
		Me._Station1 = CType(Nothing, EntityRef(Of Station))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_scheduleID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property scheduleID() As Integer
		Get
			Return Me._scheduleID
		End Get
		Set
			If ((Me._scheduleID = value)  _
						= false) Then
				Me.OnscheduleIDChanging(value)
				Me.SendPropertyChanging
				Me._scheduleID = value
				Me.SendPropertyChanged("scheduleID")
				Me.OnscheduleIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_startTime", DbType:="Time")>  _
	Public Property startTime() As System.Nullable(Of System.TimeSpan)
		Get
			Return Me._startTime
		End Get
		Set
			If (Me._startTime.Equals(value) = false) Then
				Me.OnstartTimeChanging(value)
				Me.SendPropertyChanging
				Me._startTime = value
				Me.SendPropertyChanged("startTime")
				Me.OnstartTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_endTime", DbType:="Time")>  _
	Public Property endTime() As System.Nullable(Of System.TimeSpan)
		Get
			Return Me._endTime
		End Get
		Set
			If (Me._endTime.Equals(value) = false) Then
				Me.OnendTimeChanging(value)
				Me.SendPropertyChanging
				Me._endTime = value
				Me.SendPropertyChanged("endTime")
				Me.OnendTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_firstStationID", DbType:="Int")>  _
	Public Property firstStationID() As System.Nullable(Of Integer)
		Get
			Return Me._firstStationID
		End Get
		Set
			If (Me._firstStationID.Equals(value) = false) Then
				If Me._Station.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnfirstStationIDChanging(value)
				Me.SendPropertyChanging
				Me._firstStationID = value
				Me.SendPropertyChanged("firstStationID")
				Me.OnfirstStationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lastStationID", DbType:="Int")>  _
	Public Property lastStationID() As System.Nullable(Of Integer)
		Get
			Return Me._lastStationID
		End Get
		Set
			If (Me._lastStationID.Equals(value) = false) Then
				If Me._Station1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnlastStationIDChanging(value)
				Me.SendPropertyChanging
				Me._lastStationID = value
				Me.SendPropertyChanged("lastStationID")
				Me.OnlastStationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Schedule_Booking", Storage:="_Bookings", ThisKey:="scheduleID", OtherKey:="scheduleID")>  _
	Public Property Bookings() As EntitySet(Of Booking)
		Get
			Return Me._Bookings
		End Get
		Set
			Me._Bookings.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Station_Schedule", Storage:="_Station", ThisKey:="firstStationID", OtherKey:="stationID", IsForeignKey:=true)>  _
	Public Property Station() As Station
		Get
			Return Me._Station.Entity
		End Get
		Set
			Dim previousValue As Station = Me._Station.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Station.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Station.Entity = Nothing
					previousValue.Schedules.Remove(Me)
				End If
				Me._Station.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Schedules.Add(Me)
					Me._firstStationID = value.stationID
				Else
					Me._firstStationID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Station")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Station_Schedule1", Storage:="_Station1", ThisKey:="lastStationID", OtherKey:="stationID", IsForeignKey:=true)>  _
	Public Property Station1() As Station
		Get
			Return Me._Station1.Entity
		End Get
		Set
			Dim previousValue As Station = Me._Station1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Station1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Station1.Entity = Nothing
					previousValue.Schedules1.Remove(Me)
				End If
				Me._Station1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Schedules1.Add(Me)
					Me._lastStationID = value.stationID
				Else
					Me._lastStationID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Station1")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Bookings(ByVal entity As Booking)
		Me.SendPropertyChanging
		entity.Schedule = Me
	End Sub
	
	Private Sub detach_Bookings(ByVal entity As Booking)
		Me.SendPropertyChanging
		entity.Schedule = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Staff")>  _
Partial Public Class Staff
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _staffID As Integer
	
	Private _staffName As String
	
	Private _staffIC As String
	
	Private _staffPhone As String
	
	Private _staffAddress As String
	
	Private _staffEmail As String
	
	Private _position As String
	
	Private _username As String
	
	Private _password As String
	
	Private _Payments As EntitySet(Of Payment)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnstaffIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnstaffIDChanged()
    End Sub
    Partial Private Sub OnstaffNameChanging(value As String)
    End Sub
    Partial Private Sub OnstaffNameChanged()
    End Sub
    Partial Private Sub OnstaffICChanging(value As String)
    End Sub
    Partial Private Sub OnstaffICChanged()
    End Sub
    Partial Private Sub OnstaffPhoneChanging(value As String)
    End Sub
    Partial Private Sub OnstaffPhoneChanged()
    End Sub
    Partial Private Sub OnstaffAddressChanging(value As String)
    End Sub
    Partial Private Sub OnstaffAddressChanged()
    End Sub
    Partial Private Sub OnstaffEmailChanging(value As String)
    End Sub
    Partial Private Sub OnstaffEmailChanged()
    End Sub
    Partial Private Sub OnpositionChanging(value As String)
    End Sub
    Partial Private Sub OnpositionChanged()
    End Sub
    Partial Private Sub OnusernameChanging(value As String)
    End Sub
    Partial Private Sub OnusernameChanged()
    End Sub
    Partial Private Sub OnpasswordChanging(value As String)
    End Sub
    Partial Private Sub OnpasswordChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Payments = New EntitySet(Of Payment)(AddressOf Me.attach_Payments, AddressOf Me.detach_Payments)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_staffID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property staffID() As Integer
		Get
			Return Me._staffID
		End Get
		Set
			If ((Me._staffID = value)  _
						= false) Then
				Me.OnstaffIDChanging(value)
				Me.SendPropertyChanging
				Me._staffID = value
				Me.SendPropertyChanged("staffID")
				Me.OnstaffIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_staffName", DbType:="VarChar(50)")>  _
	Public Property staffName() As String
		Get
			Return Me._staffName
		End Get
		Set
			If (String.Equals(Me._staffName, value) = false) Then
				Me.OnstaffNameChanging(value)
				Me.SendPropertyChanging
				Me._staffName = value
				Me.SendPropertyChanged("staffName")
				Me.OnstaffNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_staffIC", DbType:="Char(13)")>  _
	Public Property staffIC() As String
		Get
			Return Me._staffIC
		End Get
		Set
			If (String.Equals(Me._staffIC, value) = false) Then
				Me.OnstaffICChanging(value)
				Me.SendPropertyChanging
				Me._staffIC = value
				Me.SendPropertyChanged("staffIC")
				Me.OnstaffICChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_staffPhone", DbType:="VarChar(20)")>  _
	Public Property staffPhone() As String
		Get
			Return Me._staffPhone
		End Get
		Set
			If (String.Equals(Me._staffPhone, value) = false) Then
				Me.OnstaffPhoneChanging(value)
				Me.SendPropertyChanging
				Me._staffPhone = value
				Me.SendPropertyChanged("staffPhone")
				Me.OnstaffPhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_staffAddress", DbType:="VarChar(MAX)")>  _
	Public Property staffAddress() As String
		Get
			Return Me._staffAddress
		End Get
		Set
			If (String.Equals(Me._staffAddress, value) = false) Then
				Me.OnstaffAddressChanging(value)
				Me.SendPropertyChanging
				Me._staffAddress = value
				Me.SendPropertyChanged("staffAddress")
				Me.OnstaffAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_staffEmail", DbType:="VarChar(50)")>  _
	Public Property staffEmail() As String
		Get
			Return Me._staffEmail
		End Get
		Set
			If (String.Equals(Me._staffEmail, value) = false) Then
				Me.OnstaffEmailChanging(value)
				Me.SendPropertyChanging
				Me._staffEmail = value
				Me.SendPropertyChanged("staffEmail")
				Me.OnstaffEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_position", DbType:="VarChar(30)")>  _
	Public Property position() As String
		Get
			Return Me._position
		End Get
		Set
			If (String.Equals(Me._position, value) = false) Then
				Me.OnpositionChanging(value)
				Me.SendPropertyChanging
				Me._position = value
				Me.SendPropertyChanged("position")
				Me.OnpositionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_username", DbType:="VarChar(30)")>  _
	Public Property username() As String
		Get
			Return Me._username
		End Get
		Set
			If (String.Equals(Me._username, value) = false) Then
				Me.OnusernameChanging(value)
				Me.SendPropertyChanging
				Me._username = value
				Me.SendPropertyChanged("username")
				Me.OnusernameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_password", DbType:="VarChar(MAX)")>  _
	Public Property password() As String
		Get
			Return Me._password
		End Get
		Set
			If (String.Equals(Me._password, value) = false) Then
				Me.OnpasswordChanging(value)
				Me.SendPropertyChanging
				Me._password = value
				Me.SendPropertyChanged("password")
				Me.OnpasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Staff_Payment", Storage:="_Payments", ThisKey:="staffID", OtherKey:="staffInCharge")>  _
	Public Property Payments() As EntitySet(Of Payment)
		Get
			Return Me._Payments
		End Get
		Set
			Me._Payments.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Payments(ByVal entity As Payment)
		Me.SendPropertyChanging
		entity.Staff = Me
	End Sub
	
	Private Sub detach_Payments(ByVal entity As Payment)
		Me.SendPropertyChanging
		entity.Staff = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Station")>  _
Partial Public Class Station
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _stationID As Integer
	
	Private _stationName As String
	
	Private _Location As String
	
	Private _Bookings As EntitySet(Of Booking)
	
	Private _Bookings1 As EntitySet(Of Booking)
	
	Private _Schedules As EntitySet(Of Schedule)
	
	Private _Schedules1 As EntitySet(Of Schedule)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnstationIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnstationIDChanged()
    End Sub
    Partial Private Sub OnstationNameChanging(value As String)
    End Sub
    Partial Private Sub OnstationNameChanged()
    End Sub
    Partial Private Sub OnLocationChanging(value As String)
    End Sub
    Partial Private Sub OnLocationChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Bookings = New EntitySet(Of Booking)(AddressOf Me.attach_Bookings, AddressOf Me.detach_Bookings)
		Me._Bookings1 = New EntitySet(Of Booking)(AddressOf Me.attach_Bookings1, AddressOf Me.detach_Bookings1)
		Me._Schedules = New EntitySet(Of Schedule)(AddressOf Me.attach_Schedules, AddressOf Me.detach_Schedules)
		Me._Schedules1 = New EntitySet(Of Schedule)(AddressOf Me.attach_Schedules1, AddressOf Me.detach_Schedules1)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_stationID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property stationID() As Integer
		Get
			Return Me._stationID
		End Get
		Set
			If ((Me._stationID = value)  _
						= false) Then
				Me.OnstationIDChanging(value)
				Me.SendPropertyChanging
				Me._stationID = value
				Me.SendPropertyChanged("stationID")
				Me.OnstationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_stationName", DbType:="VarChar(50)")>  _
	Public Property stationName() As String
		Get
			Return Me._stationName
		End Get
		Set
			If (String.Equals(Me._stationName, value) = false) Then
				Me.OnstationNameChanging(value)
				Me.SendPropertyChanging
				Me._stationName = value
				Me.SendPropertyChanged("stationName")
				Me.OnstationNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Location", DbType:="VarChar(MAX)")>  _
	Public Property Location() As String
		Get
			Return Me._Location
		End Get
		Set
			If (String.Equals(Me._Location, value) = false) Then
				Me.OnLocationChanging(value)
				Me.SendPropertyChanging
				Me._Location = value
				Me.SendPropertyChanged("Location")
				Me.OnLocationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Station_Booking", Storage:="_Bookings", ThisKey:="stationID", OtherKey:="destination")>  _
	Public Property Bookings() As EntitySet(Of Booking)
		Get
			Return Me._Bookings
		End Get
		Set
			Me._Bookings.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Station_Booking1", Storage:="_Bookings1", ThisKey:="stationID", OtherKey:="source")>  _
	Public Property Bookings1() As EntitySet(Of Booking)
		Get
			Return Me._Bookings1
		End Get
		Set
			Me._Bookings1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Station_Schedule", Storage:="_Schedules", ThisKey:="stationID", OtherKey:="firstStationID")>  _
	Public Property Schedules() As EntitySet(Of Schedule)
		Get
			Return Me._Schedules
		End Get
		Set
			Me._Schedules.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Station_Schedule1", Storage:="_Schedules1", ThisKey:="stationID", OtherKey:="lastStationID")>  _
	Public Property Schedules1() As EntitySet(Of Schedule)
		Get
			Return Me._Schedules1
		End Get
		Set
			Me._Schedules1.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Bookings(ByVal entity As Booking)
		Me.SendPropertyChanging
		entity.Station = Me
	End Sub
	
	Private Sub detach_Bookings(ByVal entity As Booking)
		Me.SendPropertyChanging
		entity.Station = Nothing
	End Sub
	
	Private Sub attach_Bookings1(ByVal entity As Booking)
		Me.SendPropertyChanging
		entity.Station1 = Me
	End Sub
	
	Private Sub detach_Bookings1(ByVal entity As Booking)
		Me.SendPropertyChanging
		entity.Station1 = Nothing
	End Sub
	
	Private Sub attach_Schedules(ByVal entity As Schedule)
		Me.SendPropertyChanging
		entity.Station = Me
	End Sub
	
	Private Sub detach_Schedules(ByVal entity As Schedule)
		Me.SendPropertyChanging
		entity.Station = Nothing
	End Sub
	
	Private Sub attach_Schedules1(ByVal entity As Schedule)
		Me.SendPropertyChanging
		entity.Station1 = Me
	End Sub
	
	Private Sub detach_Schedules1(ByVal entity As Schedule)
		Me.SendPropertyChanging
		entity.Station1 = Nothing
	End Sub
End Class
